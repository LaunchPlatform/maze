"""Init database

Revision ID: 013c78883701
Revises:
Create Date: 2025-02-02 20:40:34.939263

"""
from typing import Sequence
from typing import Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "013c78883701"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agent",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("lhs_parent_id", sa.UUID(), nullable=True),
        sa.Column("rhs_parent_id", sa.UUID(), nullable=True),
        sa.Column("input_shape", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("gene", sa.LargeBinary(), nullable=False),
        sa.Column(
            "symbol_table", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("life_span", sa.Integer(), nullable=True),
        sa.Column("op_cost", sa.BigInteger(), nullable=True),
        sa.Column("build_cost", sa.BigInteger(), nullable=True),
        sa.Column("parameters_count", sa.BigInteger(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["lhs_parent_id"],
            ["agent.id"],
        ),
        sa.ForeignKeyConstraint(
            ["rhs_parent_id"],
            ["agent.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "environment",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("life_span_limit", sa.Integer(), nullable=True),
        sa.Column("basic_op_cost", sa.Integer(), nullable=True),
        sa.Column("reward", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "epoch",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("index", sa.Integer(), nullable=False),
        sa.Column("train_loss", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("train_progress", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("train_data_size", sa.Integer(), nullable=False),
        sa.Column("test_correct_count", sa.Integer(), nullable=False),
        sa.Column("test_total_count", sa.Integer(), nullable=False),
        sa.Column("cost", sa.Integer(), nullable=False),
        sa.Column("income", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agent.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "agent_id", "index", name="idx_epoch_agent_id_index_unique"
        ),
    )
    op.create_table(
        "mutation",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "INVERSION", "DUPLICATION", "SHIFT", "FLIT_BIT", name="mutationtype"
            ),
            nullable=False,
        ),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("position", sa.Integer(), nullable=False),
        sa.Column("length", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agent.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "zone",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("environment_id", sa.UUID(), nullable=False),
        sa.Column("index", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["environment_id"],
            ["environment.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "environment_id", "index", name="idx_zone_environment_id_index_unique"
        ),
    )
    op.create_table(
        "avatar",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("agent_id", sa.UUID(), nullable=False),
        sa.Column("zone_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "ALIVE",
                "OUT_OF_OP_BUDGET",
                "OUT_OF_BUILD_BUDGET",
                "OUT_OF_CREDIT",
                "NO_PARAMETERS",
                "DEAD",
                name="avatarstatus",
            ),
            nullable=False,
        ),
        sa.Column("credit", sa.Integer(), server_default="0", nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agent.id"],
        ),
        sa.ForeignKeyConstraint(
            ["zone_id"],
            ["zone.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("avatar")
    op.drop_table("zone")
    op.drop_table("mutation")
    op.drop_table("epoch")
    op.drop_table("environment")
    op.drop_table("agent")
    # ### end Alembic commands ###
